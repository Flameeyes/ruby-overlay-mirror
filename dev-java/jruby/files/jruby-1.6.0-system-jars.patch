--- bin/jruby.sh.orig	2011-08-23 19:04:22.000000000 +0200
+++ bin/jruby.sh	2011-09-05 20:42:16.352279669 +0200
@@ -20,6 +20,9 @@
 
 # ----- Verify and Set Required Environment Variables -------------------------
 
+# This will be filled in by the ebuild after install
+JRUBY_HOME=
+
 ## resolve links - $0 may be a link to  home
 PRG=$0
 progname=`basename "$0"`
@@ -38,12 +41,14 @@
   fi
 done
 
-JRUBY_HOME_1=`dirname "$PRG"`           # the ./bin dir
-if [ "$JRUBY_HOME_1" = '.' ] ; then
-  cwd=`pwd`
-  JRUBY_HOME=`dirname $cwd` # JRUBY-2699
-else
-  JRUBY_HOME=`dirname "$JRUBY_HOME_1"`  # the . dir
+if [ -z "$JRUBY_HOME" ]; then
+  JRUBY_HOME_1=`dirname "$PRG"`
+  if [ "$JRUBY_HOME_1" = '.' ] ; then
+    cwd=`pwd`
+    JRUBY_HOME=`dirname $cwd` # JRUBY-2699
+  else
+    JRUBY_HOME=`dirname "$JRUBY_HOME_1"`  # the . dir
+  fi
 fi
 
 if [ -z "$JRUBY_OPTS" ] ; then
@@ -73,74 +78,17 @@
 done
 JRUBY_OPTS=${JRUBY_OPTS_TEMP}
 
-if [ -z "$JAVACMD" ] ; then
-  if [ -z "$JAVA_HOME" ] ; then
-    JAVACMD='java'
-  else
-    JAVACMD="$JAVA_HOME/bin/java"
-  fi
-fi
-
-# If you're seeing odd exceptions, you may have a bad JVM install.
-# Uncomment this and report the version to the JRuby team along with error.
-#$JAVACMD -version
-
 JRUBY_SHELL=/bin/sh
 
 # ----- Set Up The Boot Classpath -------------------------------------------
 
-CP_DELIMITER=":"
-
-# add main jruby jar to the bootclasspath
-for j in "$JRUBY_HOME"/lib/jruby.jar "$JRUBY_HOME"/lib/jruby-complete.jar; do
-    if [ ! -e "$j" ]; then
-      continue
-    fi
-    if [ "$JRUBY_CP" ]; then
-        JRUBY_CP="$JRUBY_CP$CP_DELIMITER$j"
-        else
-        JRUBY_CP="$j"
-    fi
-    if [ $JRUBY_ALREADY_ADDED ]; then
-        echo "WARNING: more than one JRuby JAR found in lib directory"
-    fi
-    JRUBY_ALREADY_ADDED=true
-done
-
-
-# ----- Set Up The System Classpath -------------------------------------------
-
-if [ "$JRUBY_PARENT_CLASSPATH" != "" ]; then
-    # Use same classpath propagated from parent jruby
-    CP=$JRUBY_PARENT_CLASSPATH
-else
-    # add other jars in lib to CP for command-line execution
-    for j in "$JRUBY_HOME"/lib/*.jar; do
-        if [ "$j" == "$JRUBY_HOME"/lib/jruby.jar ]; then
-          continue
-        fi
-        if [ "$j" == "$JRUBY_HOME"/lib/jruby-complete.jar ]; then
-          continue
-        fi
-        if [ "$CP" ]; then
-            CP="$CP$CP_DELIMITER$j"
-            else
-            CP="$j"
-        fi
-    done
-
-fi
-
+JRUBY_CP="$(java-config -d -p jruby)"
+CP="${JRUBY_PARENT_CLASSPATH}"
 
 # ----- Execute The Requested Command -----------------------------------------
 
-if [ -z "$JAVA_MEM" ] ; then
-  JAVA_MEM=-Xmx500m
-fi
-
-if [ -z "$JAVA_STACK" ] ; then
-  JAVA_STACK=-Xss1024k
-fi
+JAVA_MEM=${JAVA_MEM:--Xmx500m}
+JAVA_STACK=${JAVA_STACK:--Xss1024k}
 
 JAVA_VM=-client
 JAVA_ENCODING=""
@@ -163,19 +111,19 @@
         elif [ "${val:0:4}" = "-Xss" ]; then
             JAVA_STACK=$val
         elif [ "${val}" = "" ]; then
-            $JAVACMD -help
+            java -help
             echo "(Prepend -J in front of these options when using 'jruby' command)" 
             exit
         elif [ "${val}" = "-X" ]; then
-            $JAVACMD -X
+            java -X
             echo "(Prepend -J in front of these options when using 'jruby' command)" 
             exit
         elif [ "${val}" = "-classpath" ]; then
-            CP="$CP$CP_DELIMITER$2"
+            CP="$CP:$2"
             CLASSPATH=""
             shift
         elif [ "${val}" = "-cp" ]; then
-            CP="$CP$CP_DELIMITER$2"
+            CP="$CP:$2"
             CLASSPATH=""
             shift
         else
@@ -209,12 +157,9 @@
         java_args="${java_args} -Djava.awt.headless=true" ;;
      # Run under JDB
      --jdb)
-        if [ -z "$JAVA_HOME" ] ; then
-          JAVACMD='jdb'
-        else
-          JAVACMD="$JAVA_HOME/bin/jdb"
-        fi 
+        JAVACMD="jdb"
         java_args="${java_args} -sourcepath $JRUBY_HOME/lib/ruby/1.8:."
+
         JRUBY_OPTS="${JRUBY_OPTS} -X+C" ;;
      --client)
         JAVA_VM=-client ;;
@@ -247,7 +192,7 @@
 fi
 
 # Add a property to report memory max
-JAVA_OPTS="$JAVA_OPTS $JAVA_VM -Djruby.memory.max=${JAVA_MEM} -Djruby.stack.max=${JAVA_STACK}"
+JAVA_OPTS="$JAVA_OPTS $JAVA_VM -Djruby.memory.max=${JAVA_MEM} -Djruby.stack.max=${JAVA_STACK} -Djruby.bindir=/usr/bin"
 
 # Append the rest of the arguments
 ruby_args="${ruby_args} $@"
@@ -257,33 +202,19 @@
 
 JAVA_OPTS="$JAVA_OPTS $JAVA_MEM $JAVA_STACK"
 
-JFFI_BOOT=""
-if [ -d $JRUBY_HOME/lib/native/ ]; then
-  for d in $JRUBY_HOME/lib/native/*`uname -s`; do
-    if [ -z "$JFFI_BOOT" ]; then
-      JFFI_BOOT="$d"
-    else
-      JFFI_BOOT="$JFFI_BOOT:$d"
-    fi
-  done
-fi
+JFFI_BOOT=$(java-config -di jffi-0.4)
 JFFI_OPTS="-Djffi.boot.library.path=$JFFI_BOOT"
 
 
 if [ "$nailgun_client" != "" ]; then
-  if [ -f $JRUBY_HOME/tool/nailgun/ng ]; then
-    exec $JRUBY_HOME/tool/nailgun/ng org.jruby.util.NailMain $JRUBY_OPTS "$@"
-  else
-    echo "error: ng executable not found; run 'make' in ${JRUBY_HOME}/tool/nailgun"
-    exit 1
-  fi
+  exec /usr/bin/ng org.jruby.util.NailMain $JRUBY_OPTS "$@"
 else
 if [ "$VERIFY_JRUBY" != "" ]; then
   if [ "$PROFILE_ARGS" != "" ]; then
       echo "Running with instrumented profiler"
   fi
 
-  "$JAVACMD" $PROFILE_ARGS $JAVA_OPTS "$JFFI_OPTS" "${java_args[@]}" -classpath "$JRUBY_CP$CP_DELIMITER$CP$CP_DELIMITER$CLASSPATH" \
+  "${JAVACMD:-java}" $PROFILE_ARGS $JAVA_OPTS "$JFFI_OPTS" "${java_args[@]}" -classpath "$JRUBY_CP:$CP:$CLASSPATH" \
     "-Djruby.home=$JRUBY_HOME" \
     "-Djruby.lib=$JRUBY_HOME/lib" -Djruby.script=jruby \
     "-Djruby.shell=$JRUBY_SHELL" \
@@ -301,7 +232,7 @@
 
   exit $JRUBY_STATUS
 else
-  exec $JAVACMD $JAVA_OPTS $JFFI_OPTS ${java_args} -Xbootclasspath/a:$JRUBY_CP -classpath $CP$CP_DELIMITER$CLASSPATH \
+  exec ${JAVACMD:-java} $JAVA_OPTS $JFFI_OPTS ${java_args} -Xbootclasspath/a:$JRUBY_CP -classpath $CP:$CLASSPATH \
       -Djruby.home=$JRUBY_HOME \
       -Djruby.lib=$JRUBY_HOME/lib -Djruby.script=jruby \
       -Djruby.shell=$JRUBY_SHELL \
